if (CMakeBuildPackageSystemHelper_FOUND)
  return()
endif()
set(CMakeBuildPackageSystemHelper_FOUND TRUE)

macro(__check_package_version)
  if (PACKAGE_VERSION VERSION_EQUAL PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_EXACT TRUE)
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
    set(PACKAGE_VERSION_UNSUITABLE FALSE)
  elseif (PACKAGE_VERSION VERSION_GREATER PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_EXACT FALSE)
    set(PACKAGE_VERSION_COMPATIBLE TRUE)
    set(PACKAGE_VERSION_UNSUITABLE FALSE)
  else (PACKAGE_VERSION VERSION_LESS PACKAGE_FIND_VERSION)
    set(PACKAGE_VERSION_EXACT FALSE)
    set(PACKAGE_VERSION_COMPATIBLE FALSE)
    set(PACKAGE_VERSION_UNSUITABLE TRUE)
    return()
  endif()
endmacro()

macro(__find_package_from_pkg_config module)
  set(__CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  list(REMOVE_ITEM CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}")

  find_package(PkgConfig REQUIRED QUIET)
  if (NOT ${package}_FIND_VERSION)
    pkg_check_modules(${module} REQUIRED QUIET IMPORTED_TARGET "${module}")
  elseif (${package}_FIND_VERSION_EXACT)
    pkg_check_modules(${module} REQUIRED QUIET IMPORTED_TARGET "${module}=${${package}_FIND_VERSION}")
  else()
    pkg_check_modules(${module} REQUIRED QUIET IMPORTED_TARGET "${module}>=${${package}_FIND_VERSION}")
  endif()

  set(PACKAGE_VERSION "${${module}_VERSION}")
  __check_package_version()
  if (PACKAGE_VERSION_UNSUITABLE)
    return()
  endif()

  if (NOT TARGET ${package}::${package})
    add_library(${package}::${package} INTERFACE IMPORTED GLOBAL)
    set_target_properties(${package}::${package} PROPERTIES INTERFACE_LINK_LIBRARIES PkgConfig::${module})
    message(STATUS "Found ${package} ${PACKAGE_VERSION} (system)")
  endif()

  set(CMAKE_PREFIX_PATH "${__CMAKE_PREFIX_PATH}")
endmacro()

macro(__find_package_from_module module)
  set(__CMAKE_PREFIX_PATH "${CMAKE_PREFIX_PATH}")
  list(REMOVE_ITEM CMAKE_PREFIX_PATH "${CMAKE_CURRENT_LIST_DIR}")

  if (${package}_FIND_VERSION_EXACT)
    find_package(${module} ${${package}_FIND_VERSION} EXACT QUIET MODULE REQUIRED)
  else()
    find_package(${module} ${${package}_FIND_VERSION} QUIET MODULE REQUIRED)
  endif()

  set(PACKAGE_VERSION "${${module}_VERSION_STRING}")
  __check_package_version()
  if (PACKAGE_VERSION_UNSUITABLE)
    return()
  endif()

  if (NOT TARGET ${package}::${package})
    add_library(${package}::${package} INTERFACE IMPORTED GLOBAL)
    set_target_properties(${package}::${package} PROPERTIES INTERFACE_LINK_LIBRARIES ${module}::${module})
    message(STATUS "Found ${package} ${PACKAGE_VERSION} (system)")
  endif()

  set(CMAKE_PREFIX_PATH "${__CMAKE_PREFIX_PATH}")
endmacro()
